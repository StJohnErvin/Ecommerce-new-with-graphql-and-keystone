input CartItemRelateToManyInput {
  create: [CartItemCreateInput]
  connect: [CartItemWhereUniqueInput]
  disconnect: [CartItemWhereUniqueInput]
  disconnectAll: Boolean
}

input OrderRelateToManyInput {
  create: [OrderCreateInput]
  connect: [OrderWhereUniqueInput]
  disconnect: [OrderWhereUniqueInput]
  disconnectAll: Boolean
}

input RoleRelateToOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: RoleWhereUniqueInput
  disconnectAll: Boolean
}

input ProductRelateToManyInput {
  create: [ProductCreateInput]
  connect: [ProductWhereUniqueInput]
  disconnect: [ProductWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  cart(where: CartItemWhereInput, search: String, sortBy: [SortCartItemsBy!], orderBy: String, first: Int, skip: Int): [CartItem!]!
  _cartMeta(where: CartItemWhereInput, search: String, sortBy: [SortCartItemsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  orders(where: OrderWhereInput, search: String, sortBy: [SortOrdersBy!], orderBy: String, first: Int, skip: Int): [Order!]!
  _ordersMeta(where: OrderWhereInput, search: String, sortBy: [SortOrdersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  role: Role
  products(where: ProductWhereInput, search: String, sortBy: [SortProductsBy!], orderBy: String, first: Int, skip: Int): [Product!]!
  _productsMeta(where: ProductWhereInput, search: String, sortBy: [SortProductsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean

  """ condition must be true for all nodes """
  cart_every: CartItemWhereInput

  """ condition must be true for at least 1 node """
  cart_some: CartItemWhereInput

  """ condition must be false for all nodes """
  cart_none: CartItemWhereInput

  """ condition must be true for all nodes """
  orders_every: OrderWhereInput

  """ condition must be true for at least 1 node """
  orders_some: OrderWhereInput

  """ condition must be false for all nodes """
  orders_none: OrderWhereInput
  role: RoleWhereInput
  role_is_null: Boolean

  """ condition must be true for all nodes """
  products_every: ProductWhereInput

  """ condition must be true for at least 1 node """
  products_some: ProductWhereInput

  """ condition must be false for all nodes """
  products_none: ProductWhereInput
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthIssuedAt_not: String
  magicAuthIssuedAt_lt: String
  magicAuthIssuedAt_lte: String
  magicAuthIssuedAt_gt: String
  magicAuthIssuedAt_gte: String
  magicAuthIssuedAt_in: [String]
  magicAuthIssuedAt_not_in: [String]
  magicAuthRedeemedAt: String
  magicAuthRedeemedAt_not: String
  magicAuthRedeemedAt_lt: String
  magicAuthRedeemedAt_lte: String
  magicAuthRedeemedAt_gt: String
  magicAuthRedeemedAt_gte: String
  magicAuthRedeemedAt_in: [String]
  magicAuthRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  cart_ASC
  cart_DESC
  orders_ASC
  orders_DESC
  role_ASC
  role_DESC
  products_ASC
  products_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
  magicAuthIssuedAt_ASC
  magicAuthIssuedAt_DESC
  magicAuthRedeemedAt_ASC
  magicAuthRedeemedAt_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  cart: CartItemRelateToManyInput
  orders: OrderRelateToManyInput
  role: RoleRelateToOneInput
  products: ProductRelateToManyInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  cart: CartItemRelateToManyInput
  orders: OrderRelateToManyInput
  role: RoleRelateToOneInput
  products: ProductRelateToManyInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersCreateInput {
  data: UserCreateInput
}

input ProductImageRelateToOneInput {
  create: ProductImageCreateInput
  connect: ProductImageWhereUniqueInput
  disconnect: ProductImageWhereUniqueInput
  disconnectAll: Boolean
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Product {
  id: ID!
  name: String
  description: String
  photo: ProductImage
  status: String
  price: Int
  user: User
}

input ProductWhereInput {
  AND: [ProductWhereInput]
  OR: [ProductWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  photo: ProductImageWhereInput
  photo_is_null: Boolean
  status: String
  status_not: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  status_i: String
  status_not_i: String
  status_contains_i: String
  status_not_contains_i: String
  status_starts_with_i: String
  status_not_starts_with_i: String
  status_ends_with_i: String
  status_not_ends_with_i: String
  status_in: [String]
  status_not_in: [String]
  price: Int
  price_not: Int
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  price_in: [Int]
  price_not_in: [Int]
  user: UserWhereInput
  user_is_null: Boolean
}

input ProductWhereUniqueInput {
  id: ID!
}

enum SortProductsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  photo_ASC
  photo_DESC
  status_ASC
  status_DESC
  price_ASC
  price_DESC
  user_ASC
  user_DESC
}

input ProductUpdateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneInput
  status: String
  price: Int
  user: UserRelateToOneInput
}

input ProductsUpdateInput {
  id: ID!
  data: ProductUpdateInput
}

input ProductCreateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneInput
  status: String
  price: Int
  user: UserRelateToOneInput
}

input ProductsCreateInput {
  data: ProductCreateInput
}

type CloudinaryImage_File {
  id: ID
  path: String
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.` 
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ProductRelateToOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: ProductWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type ProductImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  product: Product
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput]
  OR: [ProductImageWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  image: String
  image_not: String
  image_in: [String]
  image_not_in: [String]
  altText: String
  altText_not: String
  altText_contains: String
  altText_not_contains: String
  altText_starts_with: String
  altText_not_starts_with: String
  altText_ends_with: String
  altText_not_ends_with: String
  altText_i: String
  altText_not_i: String
  altText_contains_i: String
  altText_not_contains_i: String
  altText_starts_with_i: String
  altText_not_starts_with_i: String
  altText_ends_with_i: String
  altText_not_ends_with_i: String
  altText_in: [String]
  altText_not_in: [String]
  product: ProductWhereInput
  product_is_null: Boolean
}

input ProductImageWhereUniqueInput {
  id: ID!
}

enum SortProductImagesBy {
  id_ASC
  id_DESC
  altText_ASC
  altText_DESC
  product_ASC
  product_DESC
}

input ProductImageUpdateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneInput
}

input ProductImagesUpdateInput {
  id: ID!
  data: ProductImageUpdateInput
}

input ProductImageCreateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneInput
}

input ProductImagesCreateInput {
  data: ProductImageCreateInput
}

""" A keystone list """
type CartItem {
  id: ID!
  quantity: Int
  product: Product
  user: User
}

input CartItemWhereInput {
  AND: [CartItemWhereInput]
  OR: [CartItemWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  quantity: Int
  quantity_not: Int
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  quantity_in: [Int]
  quantity_not_in: [Int]
  product: ProductWhereInput
  product_is_null: Boolean
  user: UserWhereInput
  user_is_null: Boolean
}

input CartItemWhereUniqueInput {
  id: ID!
}

enum SortCartItemsBy {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  product_ASC
  product_DESC
  user_ASC
  user_DESC
}

input CartItemUpdateInput {
  quantity: Int
  product: ProductRelateToOneInput
  user: UserRelateToOneInput
}

input CartItemsUpdateInput {
  id: ID!
  data: CartItemUpdateInput
}

input CartItemCreateInput {
  quantity: Int
  product: ProductRelateToOneInput
  user: UserRelateToOneInput
}

input CartItemsCreateInput {
  data: CartItemCreateInput
}

input OrderRelateToOneInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: OrderWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type OrderItem {
  id: ID!
  name: String
  description: String
  photo: ProductImage
  price: Int
  quantity: Int
  order: Order
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput]
  OR: [OrderItemWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  photo: ProductImageWhereInput
  photo_is_null: Boolean
  price: Int
  price_not: Int
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  price_in: [Int]
  price_not_in: [Int]
  quantity: Int
  quantity_not: Int
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  quantity_in: [Int]
  quantity_not_in: [Int]
  order: OrderWhereInput
  order_is_null: Boolean
}

input OrderItemWhereUniqueInput {
  id: ID!
}

enum SortOrderItemsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  photo_ASC
  photo_DESC
  price_ASC
  price_DESC
  quantity_ASC
  quantity_DESC
  order_ASC
  order_DESC
}

input OrderItemUpdateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneInput
  price: Int
  quantity: Int
  order: OrderRelateToOneInput
}

input OrderItemsUpdateInput {
  id: ID!
  data: OrderItemUpdateInput
}

input OrderItemCreateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneInput
  price: Int
  quantity: Int
  order: OrderRelateToOneInput
}

input OrderItemsCreateInput {
  data: OrderItemCreateInput
}

input OrderItemRelateToManyInput {
  create: [OrderItemCreateInput]
  connect: [OrderItemWhereUniqueInput]
  disconnect: [OrderItemWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Order {
  id: ID!
  label: String
  total: Int
  items(where: OrderItemWhereInput, search: String, sortBy: [SortOrderItemsBy!], orderBy: String, first: Int, skip: Int): [OrderItem!]!
  _itemsMeta(where: OrderItemWhereInput, search: String, sortBy: [SortOrderItemsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  user: User
  charge: String
}

input OrderWhereInput {
  AND: [OrderWhereInput]
  OR: [OrderWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  total: Int
  total_not: Int
  total_lt: Int
  total_lte: Int
  total_gt: Int
  total_gte: Int
  total_in: [Int]
  total_not_in: [Int]

  """ condition must be true for all nodes """
  items_every: OrderItemWhereInput

  """ condition must be true for at least 1 node """
  items_some: OrderItemWhereInput

  """ condition must be false for all nodes """
  items_none: OrderItemWhereInput
  user: UserWhereInput
  user_is_null: Boolean
  charge: String
  charge_not: String
  charge_contains: String
  charge_not_contains: String
  charge_starts_with: String
  charge_not_starts_with: String
  charge_ends_with: String
  charge_not_ends_with: String
  charge_i: String
  charge_not_i: String
  charge_contains_i: String
  charge_not_contains_i: String
  charge_starts_with_i: String
  charge_not_starts_with_i: String
  charge_ends_with_i: String
  charge_not_ends_with_i: String
  charge_in: [String]
  charge_not_in: [String]
}

input OrderWhereUniqueInput {
  id: ID!
}

enum SortOrdersBy {
  id_ASC
  id_DESC
  total_ASC
  total_DESC
  items_ASC
  items_DESC
  user_ASC
  user_DESC
  charge_ASC
  charge_DESC
}

input OrderUpdateInput {
  total: Int
  items: OrderItemRelateToManyInput
  user: UserRelateToOneInput
  charge: String
}

input OrdersUpdateInput {
  id: ID!
  data: OrderUpdateInput
}

input OrderCreateInput {
  total: Int
  items: OrderItemRelateToManyInput
  user: UserRelateToOneInput
  charge: String
}

input OrdersCreateInput {
  data: OrderCreateInput
}

input UserRelateToManyInput {
  create: [UserCreateInput]
  connect: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Role {
  id: ID!
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User!]!
  _assignedToMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input RoleWhereInput {
  AND: [RoleWhereInput]
  OR: [RoleWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  canManageProducts: Boolean
  canManageProducts_not: Boolean
  canSeeOtherUsers: Boolean
  canSeeOtherUsers_not: Boolean
  canManageUsers: Boolean
  canManageUsers_not: Boolean
  canManageRoles: Boolean
  canManageRoles_not: Boolean
  canManageCart: Boolean
  canManageCart_not: Boolean
  canManageOrders: Boolean
  canManageOrders_not: Boolean

  """ condition must be true for all nodes """
  assignedTo_every: UserWhereInput

  """ condition must be true for at least 1 node """
  assignedTo_some: UserWhereInput

  """ condition must be false for all nodes """
  assignedTo_none: UserWhereInput
}

input RoleWhereUniqueInput {
  id: ID!
}

enum SortRolesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  canManageProducts_ASC
  canManageProducts_DESC
  canSeeOtherUsers_ASC
  canSeeOtherUsers_DESC
  canManageUsers_ASC
  canManageUsers_DESC
  canManageRoles_ASC
  canManageRoles_DESC
  canManageCart_ASC
  canManageCart_DESC
  canManageOrders_ASC
  canManageOrders_DESC
  assignedTo_ASC
  assignedTo_DESC
}

input RoleUpdateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyInput
}

input RolesUpdateInput {
  id: ID!
  data: RoleUpdateInput
}

input RoleCreateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyInput
}

input RolesCreateInput {
  data: RoleCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Query {
  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User]

  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User

  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta

  """ Search for all Product items which match the where clause. """
  allProducts(where: ProductWhereInput, search: String, sortBy: [SortProductsBy!], orderBy: String, first: Int, skip: Int): [Product]

  """ Search for the Product item with the matching ID. """
  Product(where: ProductWhereUniqueInput!): Product

  """ Perform a meta-query on all Product items which match the where clause. 
  """
  _allProductsMeta(where: ProductWhereInput, search: String, sortBy: [SortProductsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Product list. """
  _ProductsMeta: _ListMeta

  """ Search for all ProductImage items which match the where clause. """
  allProductImages(where: ProductImageWhereInput, search: String, sortBy: [SortProductImagesBy!], orderBy: String, first: Int, skip: Int): [ProductImage]

  """ Search for the ProductImage item with the matching ID. """
  ProductImage(where: ProductImageWhereUniqueInput!): ProductImage

  """ Perform a meta-query on all ProductImage items which match the where clause. 
  """
  _allProductImagesMeta(where: ProductImageWhereInput, search: String, sortBy: [SortProductImagesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the ProductImage list. """
  _ProductImagesMeta: _ListMeta

  """ Search for all CartItem items which match the where clause. """
  allCartItems(where: CartItemWhereInput, search: String, sortBy: [SortCartItemsBy!], orderBy: String, first: Int, skip: Int): [CartItem]

  """ Search for the CartItem item with the matching ID. """
  CartItem(where: CartItemWhereUniqueInput!): CartItem

  """ Perform a meta-query on all CartItem items which match the where clause. 
  """
  _allCartItemsMeta(where: CartItemWhereInput, search: String, sortBy: [SortCartItemsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the CartItem list. """
  _CartItemsMeta: _ListMeta

  """ Search for all OrderItem items which match the where clause. """
  allOrderItems(where: OrderItemWhereInput, search: String, sortBy: [SortOrderItemsBy!], orderBy: String, first: Int, skip: Int): [OrderItem]

  """ Search for the OrderItem item with the matching ID. """
  OrderItem(where: OrderItemWhereUniqueInput!): OrderItem

  """ Perform a meta-query on all OrderItem items which match the where clause. 
  """
  _allOrderItemsMeta(where: OrderItemWhereInput, search: String, sortBy: [SortOrderItemsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the OrderItem list. """
  _OrderItemsMeta: _ListMeta

  """ Search for all Order items which match the where clause. """
  allOrders(where: OrderWhereInput, search: String, sortBy: [SortOrdersBy!], orderBy: String, first: Int, skip: Int): [Order]

  """ Search for the Order item with the matching ID. """
  Order(where: OrderWhereUniqueInput!): Order

  """ Perform a meta-query on all Order items which match the where clause. 
  """
  _allOrdersMeta(where: OrderWhereInput, search: String, sortBy: [SortOrdersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Order list. """
  _OrdersMeta: _ListMeta

  """ Search for all Role items which match the where clause. """
  allRoles(where: RoleWhereInput, search: String, sortBy: [SortRolesBy!], orderBy: String, first: Int, skip: Int): [Role]

  """ Search for the Role item with the matching ID. """
  Role(where: RoleWhereUniqueInput!): Role

  """ Perform a meta-query on all Role items which match the where clause. """
  _allRolesMeta(where: RoleWhereInput, search: String, sortBy: [SortRolesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Role list. """
  _RolesMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]

  """The version of the Keystone application serving this API."""
  appVersion: String
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(email: String!, token: String!): ValidateUserPasswordResetTokenResult
  keystone: KeystoneMeta!
}

type Mutation {
  """ Create a single User item. """
  createUser(data: UserCreateInput): User

  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]

  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User

  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]

  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User

  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]

  """ Create a single Product item. """
  createProduct(data: ProductCreateInput): Product

  """ Create multiple Product items. """
  createProducts(data: [ProductsCreateInput]): [Product]

  """ Update a single Product item by ID. """
  updateProduct(id: ID!, data: ProductUpdateInput): Product

  """ Update multiple Product items by ID. """
  updateProducts(data: [ProductsUpdateInput]): [Product]

  """ Delete a single Product item by ID. """
  deleteProduct(id: ID!): Product

  """ Delete multiple Product items by ID. """
  deleteProducts(ids: [ID!]): [Product]

  """ Create a single ProductImage item. """
  createProductImage(data: ProductImageCreateInput): ProductImage

  """ Create multiple ProductImage items. """
  createProductImages(data: [ProductImagesCreateInput]): [ProductImage]

  """ Update a single ProductImage item by ID. """
  updateProductImage(id: ID!, data: ProductImageUpdateInput): ProductImage

  """ Update multiple ProductImage items by ID. """
  updateProductImages(data: [ProductImagesUpdateInput]): [ProductImage]

  """ Delete a single ProductImage item by ID. """
  deleteProductImage(id: ID!): ProductImage

  """ Delete multiple ProductImage items by ID. """
  deleteProductImages(ids: [ID!]): [ProductImage]

  """ Create a single CartItem item. """
  createCartItem(data: CartItemCreateInput): CartItem

  """ Create multiple CartItem items. """
  createCartItems(data: [CartItemsCreateInput]): [CartItem]

  """ Update a single CartItem item by ID. """
  updateCartItem(id: ID!, data: CartItemUpdateInput): CartItem

  """ Update multiple CartItem items by ID. """
  updateCartItems(data: [CartItemsUpdateInput]): [CartItem]

  """ Delete a single CartItem item by ID. """
  deleteCartItem(id: ID!): CartItem

  """ Delete multiple CartItem items by ID. """
  deleteCartItems(ids: [ID!]): [CartItem]

  """ Create a single OrderItem item. """
  createOrderItem(data: OrderItemCreateInput): OrderItem

  """ Create multiple OrderItem items. """
  createOrderItems(data: [OrderItemsCreateInput]): [OrderItem]

  """ Update a single OrderItem item by ID. """
  updateOrderItem(id: ID!, data: OrderItemUpdateInput): OrderItem

  """ Update multiple OrderItem items by ID. """
  updateOrderItems(data: [OrderItemsUpdateInput]): [OrderItem]

  """ Delete a single OrderItem item by ID. """
  deleteOrderItem(id: ID!): OrderItem

  """ Delete multiple OrderItem items by ID. """
  deleteOrderItems(ids: [ID!]): [OrderItem]

  """ Create a single Order item. """
  createOrder(data: OrderCreateInput): Order

  """ Create multiple Order items. """
  createOrders(data: [OrdersCreateInput]): [Order]

  """ Update a single Order item by ID. """
  updateOrder(id: ID!, data: OrderUpdateInput): Order

  """ Update multiple Order items by ID. """
  updateOrders(data: [OrdersUpdateInput]): [Order]

  """ Delete a single Order item by ID. """
  deleteOrder(id: ID!): Order

  """ Delete multiple Order items by ID. """
  deleteOrders(ids: [ID!]): [Order]

  """ Create a single Role item. """
  createRole(data: RoleCreateInput): Role

  """ Create multiple Role items. """
  createRoles(data: [RolesCreateInput]): [Role]

  """ Update a single Role item by ID. """
  updateRole(id: ID!, data: RoleUpdateInput): Role

  """ Update multiple Role items by ID. """
  updateRoles(data: [RolesUpdateInput]): [Role]

  """ Delete a single Role item by ID. """
  deleteRole(id: ID!): Role

  """ Delete multiple Role items by ID. """
  deleteRoles(ids: [ID!]): [Role]
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): SendUserPasswordResetLinkResult
  redeemUserPasswordResetToken(email: String!, token: String!, password: String!): RedeemUserPasswordResetTokenResult
  addToCart(productId: ID): CartItem
  checkout(token: String!): Order
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type SendUserPasswordResetLinkResult {
  code: PasswordResetRequestErrorCode!
  message: String!
}

enum PasswordResetRequestErrorCode {
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
}

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
  TOKEN_NOT_SET
  TOKEN_MISMATCH
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsHash: String!
  customViewsHash: String
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
